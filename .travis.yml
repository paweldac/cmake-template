os: linux
dist: xenial
sudo: false
language: cpp

cache:
  directories:
    - ${HOME}/deps/boost/g++-8/boost-1.70.0
    - ${HOME}/deps/boost/clang++-8/boost-1.70.0
    - ${HOME}/deps/llvm-8.0.0
    - ${HOME}/deps/cmake-3.14.5

matrix:
  include:
    - env: COMPILER=clang++-8 BOOST_VERSION=1.70.0 BUILD_TESTS=false BUILD_TYPE=Release
      addons: { apt: { packages: ["clang-8"], sources: ["llvm-toolchain-xenial-8"] } }
    - env: COMPILER=clang++-8 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=Debug
      addons: { apt: { packages: ["clang-8", "valgrind"], sources: ["ubuntu-toolchain-r-test", "llvm-toolchain-xenial-8"] } }
    - env: COMPILER=g++-8 BOOST_VERSION=1.70.0 BUILD_TESTS=false BUILD_TYPE=Release
      addons: { apt: { packages: ["g++-8"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-8 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=Debug
      addons: { apt: { packages: ["g++-8", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
git:
  submodules: false

before_install:
  - git submodule update --init --recursive

install:
  # All the dependencies are installed in ${HOME}/deps/
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  # Set env variables
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - ${CXX} --version
  # Set new gcc/clang in PATH
  - mkdir -p ${HOME}/.local/bin
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      ln -s /usr/bin/${COMPILER} ~/.local/bin/clang++
    else
      ln -s /usr/bin/${COMPILER} ~/.local/bin/g++
    fi
  - export PATH={HOME}/.local/bin:${PATH}
  # Install CMake
  - CMAKE_MAJOR_VERSION=3.14
  - CMAKE_MINOR_VERSION=5
  - |
    if [[ -z "$(ls -A ${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin)" ]] && [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake-${CMAKE_VERSION} && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake-${CMAKE_VERSION}
      export PATH=${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  # Install the right version of clang, libc++ and libc++abi
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      if   [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.2";
      elif [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
      elif [[ "${CXX}" == "clang++-7" ]];   then LLVM_VERSION="7.0.1";
      elif [[ "${CXX}" == "clang++-8" ]];   then LLVM_VERSION="8.0.0";
      fi
      
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      if [[ -z "$(ls -A ${DEPS_DIR}/llvm-${LLVM_VERSION})" ]]; then
        mkdir -p llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}/build llvm-${LLVM_VERSION}/projects/libcxx llvm-${LLVM_VERSION}/projects/libcxxabi
        travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION} || exit 1
        travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxx || exit 1
        travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxxabi || exit 1
        (cd llvm-${LLVM_VERSION}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm-${LLVM_VERSION}/install) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxx && make install -j2) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxxabi && make install -j2) || exit 1
      fi
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib"
    fi

  # Install Boost
  - |
    BOOST_DIR=${DEPS_DIR}/boost/${COMPILER}/boost-${BOOST_VERSION}
    if [[ "${BOOST_VERSION}" != "" ]] && [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
      BOOST_URL="https://dl.bintray.com/boostorg/release/${BOOST_VERSION}/source/boost_${BOOST_VERSION//\./_}.tar.gz"
      mkdir -p ${BOOST_DIR}
      { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
      if [[ "${CXX%%+*}" == "clang" ]]; then
        (cd ${BOOST_DIR} && ./bootstrap.sh --with-toolset=clang && ./b2 clean && ./b2 toolset=clang cxxflags="-stdlib=libc++ ${CXXFLAGS}" linkflags="-stdlib=libc++ ${LDFLAGS}");
      elif [[ "${CXX%%+*}" == "g" ]]; then
        (cd ${BOOST_DIR} && ./bootstrap.sh --with-toolset=gcc && ./b2 clean && ./b2 toolset=gcc);
      fi
    fi
 
before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DBOOST_ROOT=${BOOST_DIR} -DBUILD_TYPE="$BUILD_TYPE" )

script:
  - |
    cd build
    if [[ "${BUILD_TESTS}" == "true" ]]; then
      make cmake-template.ut
    fi
  - make cmake-template.app
