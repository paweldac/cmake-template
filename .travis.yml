os: linux
dist: bionic
language: cpp

cache:
  directories:
    - ${HOME}/deps/boost/xcode-11A1027/boost-1.70.0
    - ${HOME}/deps/boost/xcode-9F2000/boost-1.70.0
    - ${HOME}/deps/boost/g++-5/boost-1.70.0
    - ${HOME}/deps/boost/g++-6/boost-1.70.0
    - ${HOME}/deps/boost/g++-7/boost-1.70.0
    - ${HOME}/deps/boost/g++-8/boost-1.70.0
    - ${HOME}/deps/boost/g++-9/boost-1.70.0
    - ${HOME}/deps/boost/clang++-6.0/boost-1.70.0
    - ${HOME}/deps/boost/clang++-7/boost-1.70.0
    - ${HOME}/deps/boost/clang++-8/boost-1.70.0
    - ${HOME}/deps/boost/clang++-9/boost-1.70.0
    - ${HOME}/deps/boost/clang++-10/boost-1.70.0
    - ${HOME}/deps/llvm-6.0.1
    - ${HOME}/deps/llvm-7.1.0
    - ${HOME}/deps/llvm-8.0.1
    - ${HOME}/deps/llvm-9.0.1
    - ${HOME}/deps/llvm-10.0.0
    - ${HOME}/deps/cmake-3.18.2

jobs:
  include:
    - name: Scripts check
      env: SCVERSION=v0.7.1 SC_DIR=${HOME}/deps/shellcheck-${SCVERSION}
      addons: { apt: { packages: ["xz-utils"] } }
      install:
        - |
          SC_URL="https://github.com/koalaman/shellcheck/releases/download/${SCVERSION}/shellcheck-${SCVERSION}.linux.x86_64.tar.xz"
          mkdir -p ${SC_DIR} && travis_retry wget --no-check-certificate --quiet -O - ${SC_URL} | tar --strip-components=1 -xJ -C ${SC_DIR} || exit 1
      before_script:
        ${SC_DIR}/shellcheck --version
      script:
        ${SC_DIR}/shellcheck --color ${TRAVIS_BUILD_DIR}/scripts/* || exit 1
    - name: Style format check
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-format-10"]
        }
      }
      install:
        # Set new clang-format in PATH
        - mkdir -p ${HOME}/.local/bin
        - ln -s /usr/bin/clang-format-10 ~/.local/bin/clang-format
        - export PATH=${HOME}/.local/bin:${PATH}
        - pip install cmake-format==0.6.10
      before_script:
        - clang-format --version
        - cmake-format --version
      script:
        - ${TRAVIS_BUILD_DIR}/scripts/format_code -c ${TRAVIS_BUILD_DIR} || exit 1
        - ${TRAVIS_BUILD_DIR}/scripts/format_cmake -c ${TRAVIS_BUILD_DIR} || exit 1
    - os: osx
      env: XCODE_BUILD_VERSION=11A1027 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      osx_image: xcode11.3
    - os: osx
      env: XCODE_BUILD_VERSION=9F2000 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      osx_image: xcode9.4
    - env: COMPILER=clang++-6.0 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-6 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-6.0"]
        }
      }
    - env: COMPILER=clang++-7 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-7"]
        }
      }
    - env: COMPILER=clang++-8 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-8"]
        }
      }
    - env: COMPILER=clang++-9 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-9"]
        }
      }
    - env: COMPILER=clang++-10 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10"]
        }
      }
    - env: COMPILER=clang++-10 BOOST_VERSION=1.70.0 BUILD_TESTS=true MEMORY_SANITIZER=Valgrind BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10", "valgrind"]
        }
      }
    - env: COMPILER=clang++-10 BOOST_VERSION=1.70.0 BUILD_TESTS=true MEMORY_SANITIZER=AddressSanitizer BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10"]
        }
      }
    - env: COMPILER=clang++-10 BOOST_VERSION=1.70.0 BUILD_TESTS=true MEMORY_SANITIZER=ThreadSanitizer BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10"]
        }
      }
    - env: COMPILER=g++-5 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-5"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-6 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-6"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-7 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-7"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-8 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-8"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-9 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-9"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-9 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo MEMORY_SANITIZER=Valgrind
      addons: { apt: { packages: ["g++-9", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-9 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo MEMORY_SANITIZER=AddressSanitizer
      addons: { apt: { packages: ["g++-9"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-9 BOOST_VERSION=1.70.0 BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo MEMORY_SANITIZER=ThreadSanitizer
      addons: { apt: { packages: ["g++-9"], sources: ["ubuntu-toolchain-r-test"] } }

git:
  submodules: false

before_install:
  - git submodule update --init --recursive

install:
  # All the dependencies are installed in ${HOME}/deps/
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - export PARALLEL_BUILD_JOBS="${PARALLEL_BUILD_JOBS:-$(nproc)}"
  # Set env variables and default build settings
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - ${CXX} --version
  - if [[ "${MEMORY_SANITIZER}" == "" ]]; then MEMORY_SANITIZER=None; fi
  # Prepare prefix root used for dependency installation
  - (mkdir -p ${HOME}/prefix_root/usr/includes && mkdir -p ${HOME}/prefix_root/usr/lib && mkdir -p ${HOME}/prefix_root/usr/share)
  # Set new gcc/clang in PATH
  - mkdir -p ${HOME}/.local/bin
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      ln -s /usr/bin/${COMPILER} ~/.local/bin/clang++
    else
      ln -s /usr/bin/${COMPILER} ~/.local/bin/g++
    fi
  - export PATH=${HOME}/.local/bin:${PATH}
  # Install CMake
  - CMAKE_MAJOR_VERSION=3.18
  - CMAKE_MINOR_VERSION=2
  - CMAKE_VERSION="${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}"
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ -z "$(ls -A ${DEPS_DIR}/cmake-${CMAKE_VERSION})" ]]; then
        CMAKE_URL="https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
        mkdir -p cmake-${CMAKE_VERSION} && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake-${CMAKE_VERSION}
      fi
      export PATH=${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin:${PATH}
    else
      pip install cmake==${CMAKE_VERSION}
    fi
  - cmake --version

  # Install the right version of clang, libc++ and libc++abi
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      if [[ "${CXX}" == "clang++-6.0" ]]; then LLVM_VERSION="6.0.1";
      elif [[ "${CXX}" == "clang++-7" ]];   then LLVM_VERSION="7.1.0";
      elif [[ "${CXX}" == "clang++-8" ]];   then LLVM_VERSION="8.0.1";
      elif [[ "${CXX}" == "clang++-9" ]];   then LLVM_VERSION="9.0.1";
      elif [[ "${CXX}" == "clang++-10" ]];  then LLVM_VERSION="10.0.0";
      fi
      
      if [[ "${CXX}" == "clang++-6.0" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      else
        LLVM_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      fi

      if [[ -z "$(ls -A ${DEPS_DIR}/llvm-${LLVM_VERSION})" ]]; then
        mkdir -p llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}/build llvm-${LLVM_VERSION}/projects/libcxx llvm-${LLVM_VERSION}/projects/libcxxabi
        travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION} || exit 1
        travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxx || exit 1
        travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxxabi || exit 1
        (cd llvm-${LLVM_VERSION}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm-${LLVM_VERSION}/install) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxx && make install -j${PARALLEL_BUILD_JOBS}) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxxabi && make install -j${PARALLEL_BUILD_JOBS}) || exit 1
      fi
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib"
    fi
  # Install GoogleTest
  - |
    GTEST_GIT_REPO="https://github.com/google/googletest.git"
    GTEST_GIT_HASH="703bd9caab50b139428cea1aaff9974ebee5742e"
    GTEST_DIR="${DEPS_DIR}/googletest/googletest-703bd9c"
    if [[ "${BUILD_TESTS}" == "true" ]]; then
      if [[ -z "$(ls -A ${GTEST_DIR})" ]]; then
        mkdir -p ${GTEST_DIR}
        git clone ${GTEST_GIT_REPO} ${GTEST_DIR}
        cd ${GTEST_DIR}
        git reset --hard ${GTEST_GIT_HASH}
      fi
      if [[ "${CXX%%+*}" == "clang" ]]; then
        (mkdir -p ${GTEST_DIR}/build && cd ${GTEST_DIR}/build && cmake .. -DCMAKE_CXX_FLAGS="-std=c++11 -stdlib=libc++ ${CXXFLAGS}" -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" && cmake --build . -j${PARALLEL_BUILD_JOBS} --target install)
      else
        (mkdir -p ${GTEST_DIR}/build && cd ${GTEST_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" && cmake --build . -j${PARALLEL_BUILD_JOBS} --target install)
      fi
    fi
  # Install Boost
  - |
    BOOST_URL="https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz/download"
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      BOOST_DIR=${DEPS_DIR}/boost/${COMPILER}/boost-${BOOST_VERSION}
      if [[ "${COMPILER}" != "" ]] && [[ "${BOOST_VERSION}" != "" ]] && [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
        mkdir -p ${BOOST_DIR}
        { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        if [[ "${CXX%%+*}" == "clang" ]]; then
          (cd ${BOOST_DIR} && ./bootstrap.sh --with-toolset=clang --prefix=${BOOST_DIR} && ./b2 toolset=clang headers && ./b2 toolset=clang cxxflags="-std=c++1y -stdlib=libc++ ${CXXFLAGS}" linkflags="-stdlib=libc++ ${LDFLAGS}");
        else
          (cd ${BOOST_DIR} && ./bootstrap.sh --with-toolset=gcc --prefix=${BOOST_DIR} && ./b2 toolset=gcc headers && ./b2 toolset=gcc cxxflags="-std=c++1y");
        fi
      fi
    else
      BOOST_DIR=${DEPS_DIR}/boost/xcode-${XCODE_BUILD_VERSION}/boost-${BOOST_VERSION}
      if [[ "${XCODE_BUILD_VERSION}" != "" ]] && [[ "${BOOST_VERSION}" != "" ]] && [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
        mkdir -p ${BOOST_DIR}
        { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        (cd ${BOOST_DIR} && ./bootstrap.sh --with-toolset=darwin --prefix=${BOOST_DIR} && ./b2 toolset=darwin headers && ./b2 toolset=darwin cxxflags="-std=c++1y");
      fi
    fi

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" -DMEMORY_SANITIZER=${MEMORY_SANITIZER} -DBOOST_ROOT=${BOOST_DIR} -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DBUILD_TESTING="$BUILD_TESTS" )

script:
  - |
    cd build
    if [[ "${BUILD_TESTS}" == "true" ]]; then
      make cmake-template.tests_build -j${PARALLEL_BUILD_JOBS}
      if [[ "${MEMORY_SANITIZER}" != "None" ]]; then
        if ! ctest --schedule-random --output-on-failure --parallel ${PARALLEL_BUILD_JOBS} -D ExperimentalMemCheck; then
          find Testing/Temporary -name "MemoryChecker.*.log" -exec cat {} +
          exit 1
        fi
      else
        ctest --schedule-random --output-on-failure --parallel ${PARALLEL_BUILD_JOBS} .
      fi
    fi
  - make cmake-template.app -j${PARALLEL_BUILD_JOBS}
